
#include "ZWApplianceRes.hpp"

#include <pgmspace.h>

const char PORTAL_RESDATA_INDEX_HTML[] PROGMEM =
  "<!DOCTYPE html>\n"
  "<html>\n"
  "<body>\n"
  "<h1>A Fresh Start!</h1>\n"
  "<hr>\n"

  "<h2>This is the default index page.</h2>\n"
  "<p>Once you have created your own index page, you won't see this page again.<br>\n"
  "But before then, there are some links below to help you to get around.<br>\n"
  "(The administrative login user name is '" PORTAL_ADMIN_USER "', which is also the default password.)\n"

  "<ul>\n"

  "<li>To manage accounts and access control, <a href=\"" PORTAL_PAGE_AUTHCONFIG "\">click here</a>;\n"
  "<ul><li><em>You are strongly recommended to change the default adminstrator's password!</em></ul>\n"

  "<li>To change device configuration, <a href=\"" PORTAL_PAGE_SYSCONFIG "\">click here</a>;\n"
  "<ul><li><em>Most configuration changes require a restart to become effective.</em></ul>\n"

  "<li>To restart this device, <a href=\"" PORTAL_API_HWCTL_DEVRESTART "\">click here</a>;\n"

  "<li>To perform an over-the-air firmware update, <a href=\"" PORTAL_PAGE_OTA "\">click here</a>;\n"

  "<li>To get a plain view of the whole file system, <a href=\"" PORTAL_FSDAV_ROOT "\">click here</a>;\n"
  "<ul>\n"
  "<li><em>The '" PORTAL_DIR "' sub-folder is the effective Web root.</em>\n"
  "<li><em>Directory index file name is '" PORTAL_PAGE_INDEX "'.</em>\n"
  "<li>You can also mount this location as a WebDAV folder.\n"
  "</ul>\n"

  "<li style=\"color:red\">Lastly, to erase all your customizations and start over, \n"
  "<a href=\"" PORTAL_API_HWCTL_DEVRESET "\">click here</a>.\n"
  "<ul><li><em>Be careful, when you click the above link, there is no going back!</em></ul>\n"

  "</ul>\n"

  "</body>\n"
  "</html>";

const char PORTAL_RESDATA_DEVRESET_HTML[] PROGMEM =
  "<!DOCTYPE html>\n"
  "<html>\n"
  "<body>\n"
  "<h1>Reset in Progress</h1>\n"
  "<hr>\n"

  "<h2>This device is being reset...</h2>\n"
  "<p>All your configurations are erased, and device will reinitialize after restart.\n"

  "<ul>\n"
  "<li>Wait for about 10 seconds, and <a href=\"" PORTAL_ROOT "\">click here</a>.\n"
  "</ul>\n"

  "</body>\n"
  "</html>";

const char PORTAL_RESDATA_DEVRESTART_HTML[] PROGMEM =
  "<!DOCTYPE html>\n"
  "<html>\n"
  "<body>\n"
  "<h1>Restart in Progress</h1>\n"
  "<hr>\n"

  "<h2>This device is being restarted...</h2>\n"
  "<p>All your configurations are persisted, and device will resume operation after restart.\n"

  "<ul>\n"
  "<li>Wait for about 10 seconds, and <a href=\"" PORTAL_ROOT "\">click here</a>.\n"
  "</ul>\n"

  "</body>\n"
  "</html>";

const char PORTAL_RESDATA_PANIC_HTML[] PROGMEM =
  "<!DOCTYPE html>\n"
  "<html>\n"
  "<body>\n"
  "<h1>Ooops, something went horribly wrong!</h1>\n"
  "<hr>\n"

  "<h2>But don't worry, this device is not dead yet.</h2>\n"
  "<p>You can still recover by a hard reset, but you will loose all your configurations.\n"

  "<ul>\n"
  "<li>To do that, you need to authenticate as an administrator.\n"
  "<li>When you are ready, <a href=\"" PORTAL_API_HWCTL_DEVRESET "\">click here</a>.\n"
  "</ul>\n"

  "</body>\n"
  "</html>";

const char PORTAL_RESDATA_OTA_HTML[] PROGMEM =
  "<!DOCTYPE html>\n"
  "<html>\n"
  "<head>\n"
  "<script src=\"" PORTAL_RES_MD5JS "\"></script>\n"
  "<script src=\"" PORTAL_RES_OTACOREJS "\"></script>\n"
  "<style>\n"
  "#ota-msg {\n"
  "  outline: 1px solid;\n"
  "  padding: 0.25em;\n"
  "}\n"
  "#ota-msg.ready {\n"
  "  color: grey;\n"
  "  background: whitesmoke;\n"
  "}\n"
  "#ota-msg.notready {\n"
  "  color: darkgoldenrod;\n"
  "  background: oldlace;\n"
  "}\n"
  "#ota-msg.progress {\n"
  "  color: cornflowerblue;\n"
  "  background: aliceblue;\n"
  "}\n"
  "#ota-msg.succeed {\n"
  "  color: mediumseagreen;\n"
  "  background: mintcream;\n"
  "}\n"
  "#ota-msg.fail {\n"
  "  color: indianred;\n"
  "  background: lavenderblush;\n"
  "}\n"
  "</style>\n"
  "<script>\n"
  "function getNotifyBanner(formElem) {\n"
  "  var msgElem = document.getElementById('ota-msg');\n"
  "  if (msgElem == null) {\n"
  "    msgElem = document.createElement('div');\n"
  "    msgElem.id = 'ota-msg';\n"
  "    formElem.parentNode.insertBefore(msgElem, formElem);\n"
  "  }\n"
  "  return msgElem;\n"
  "}\n"
  "var OTAUI = {};\n"
  "function ota_avail(state, comp, msg) {\n"
  "  var msgElem = getNotifyBanner(OTAUI['Form']);\n"
  "  if (state) {\n"
  "    msgElem.className = 'ready';\n"
  "    msgElem.innerHTML = 'Ready for upload';\n"
  "    OTAUI.Submit.disabled = false;\n"
  "  } else {\n"
  "    msgElem.className = 'notready';\n"
  "    msgElem.innerHTML = msg;\n"
  "    OTAUI.Submit.disabled = true;\n"
  "  }\n"
  "}\n"
  "function ota_select(evt) {\n"
  "  var uploadSpec = event.srcElement.files;\n"
  "  if (uploadSpec.length > 0) {\n"
  "    OTAUI.Core.selectFile(uploadSpec[0]);\n"
  "  } else {\n"
  "    OTAUI.Core.selectFile();\n"
  "  }\n"
  "}\n"
  "function ota_upload() {\n"
  "  OTAUI.Core.uploadDo(function(succ,prog) {\n"
  "    var msgElem = getNotifyBanner(OTAUI['Form']);\n"
  "    if (succ === undefined) {\n"
  "      OTAUI.Abort.disabled = false;\n"
  "      msgElem.className = 'progress';\n"
  "      msgElem.innerHTML = 'Upload in progress... ' +\n"
  "        (prog <= 1? (prog*100).toFixed(1) + '%' : prog);\n"
  "    } else if (succ) {\n"
  "      OTAUI.Abort.disabled = true;\n"
  "      msgElem.className = 'succeed';\n"
  "      msgElem.innerHTML = 'Upgrade successful! ' +\n"
  "        'To restart device, <a href=\"" PORTAL_API_HWCTL_DEVRESTART "\">click here</a>.';\n"
  "    } else {\n"
  "      OTAUI.Abort.disabled = true;\n"
  "      msgElem.className = 'fail';\n"
  "      msgElem.innerHTML = 'Upgrade failed - ' + prog;\n"
  "    }\n"
  "  });\n"
  "}\n"
  "function ota_abort() {\n"
  "  OTAUI.Core.uploadAbort();\n"
  "}\n"
  "window.onload = function() {\n"
  "  OTAUI['Form'] = document.getElementById('ota-form');\n"
  "  OTAUI['Submit'] = document.getElementById('ota-submit');\n"
  "  OTAUI['Abort'] = document.getElementById('ota-abort');\n"
  "  OTAUI['Core'] = new OTA('" PORTAL_API_OTA "', ota_avail);\n"
  "  OTAUI.Abort.onclick = ota_abort;\n"
  "};\n"
  "</script>\n"
  "</head>\n"
  "<body>\n"
  "<h1>Firware Update</h1>\n"
  "<hr>\n"

  "<h2>This is the default firmware update page.</h2>\n"
  "<p>You can override this page by creating the '" PORTAL_PAGE_OTA "' file in the \n"
  "<a href=\"" PORTAL_FSDAV PORTAL_DIR "\">'" PORTAL_DIR "' sub-folder</a>.\n"

  "<form id=\"ota-form\" action=\"javascript:void(0)\" onsubmit=\"ota_upload()\">\n"
  "<p>Please follow the steps below:\n"
  "<ol>\n"

  "<li>Select the firmware file: <input id=\"ota-file\" type=\"file\" onchange=\"ota_select(event)\"></li><br>\n"
  "<li>Confirm by clicking this button: <input id=\"ota-submit\" type=\"submit\" value=\"Perform Update\" disabled><br>\n"
  "To abort update, click this button: <input id=\"ota-abort\" type=\"button\" value=\"Abort Update\" disabled></li>\n"
  "</form>\n"
  "</ul>\n"
  "</body>\n"
  "</html>";

const char PORTAL_RESDATA_SYSCONFIG_HTML[] PROGMEM =
  "<!DOCTYPE html>\n"
  "<html>\n"
  "<head>\n"
  "<script src=\"" PORTAL_RES_JQUERYJS "\"></script>\n"
  "<script src=\"" PORTAL_RES_APSCANCOREJS "\"></script>\n"
  "<style>\n"
  "#apscan-msg {\n"
  "  outline: 1px solid;\n"
  "  padding: 0.25em;\n"
  "}\n"
  "#apscan-msg.ready {\n"
  "  color: grey;\n"
  "  background: whitesmoke;\n"
  "}\n"
  "#apscan-msg.notready {\n"
  "  color: darkgoldenrod;\n"
  "  background: oldlace;\n"
  "}\n"
  "#apscan-msg.progress {\n"
  "  color: cornflowerblue;\n"
  "  background: aliceblue;\n"
  "}\n"
  "#apscan-msg.succeed {\n"
  "  color: mediumseagreen;\n"
  "  background: mintcream;\n"
  "}\n"
  "#apscan-msg.fail {\n"
  "  color: indianred;\n"
  "  background: lavenderblush;\n"
  "}\n"
  "#apscan-list {\n"
  "  font-family: monospace;\n"
  "  list-style-type: none;\n"
  "  padding: 0.25em 0;\n"
  "}\n"
  "#apscan-list li {\n"
  "  padding: 0.125em 0.25em;\n"
  "  position: relative;\n"
  "}\n"
  "#apscan-list li:hover {\n"
  "  background-color: aliceblue;\n"
  "}\n"
  "#apscan-list li.current {\n"
  "  background: MintCream\n"
  "}\n"
  "#apscan-list li.current:after {\n"
  "  content: '(Current)';\n"
  "  position: absolute;\n"
  "  top: 0;\n"
  "  right: 0;\n"
  "  color: green;\n"
  "}\n"
  "#apscan-list li.active {\n"
  "  background-color: lightblue;\n"
  "}\n"
  "#apscan-list label {\n"
  "  cursor: pointer;\n"
  "}\n"
  "#apscan-list input[type='radio'] {\n"
  "  width: 1em;\n"
  "  margin: 0;\n"
  "  outline: none;\n"
  "  vertical-align: middle;\n"
  "}\n"
  "#apscan-list span {\n"
  "  display: inline-block;\n"
  "  margin: 0 0.5em;\n"
  "  vertical-align: middle;\n"
  "  white-space: nowrap;\n"
  "  overflow: hidden;\n"
  "  text-overflow: ellipsis;\n"
  "}\n"
  "#apscan-list span.apssid {\n"
  "  width: 16em;\n"
  "}\n"
  "#apscan-list span.apssid:before {\n"
  "  content: 'SSID=';\n"
  "}\n"
  "#apscan-list span.apnamed {\n"
  "  color: Blue;\n"
  "}\n"
  "#apscan-list span.aphidden {\n"
  "  color: Grey;\n"
  "}\n"
  "#apscan-list span.apmac {\n"
  "  color: Navy;\n"
  "  width: 11em;\n"
  "}\n"
  "#apscan-list span.apmac:before {\n"
  "  content: '[';\n"
  "}\n"
  "#apscan-list span.apmac:after {\n"
  "  content: ']';\n"
  "}\n"
  "#apscan-list span.apchan {\n"
  "  width: 3em;\n"
  "  color: ForestGreen;\n"
  "}\n"
  "#apscan-list span.apchan:before {\n"
  "  content: 'CH=';\n"
  "}\n"
  "#apscan-list span.aprssi {\n"
  "  width: 5em;\n"
  "  color: Maroon;\n"
  "}\n"
  "#apscan-list span.aprssi:before {\n"
  "  content: 'RSSI=';\n"
  "}\n"
  "#apscan-list span.apphys {\n"
  "  width: 4.5em;\n"
  "  color: RebeccaPurple;\n"
  "}\n"
  "#apscan-list span.apphys:before {\n"
  "  content: 'PHYS=';\n"
  "}\n"
  "#apscan-list span.apauth {\n"
  "  width: 12em;\n"
  "  color: GoldenRod;\n"
  "}\n"
  "#apscan-list span.apauth:before {\n"
  "  content: 'Auth=';\n"
  "}\n"
  "#apscan-list.disabled span {\n"
  "  color: Grey;\n"
  "}\n"
  "#apscan-list.disabled li:hover {\n"
  "  background-color: WhiteSmoke;\n"
  "}\n"
  "#apscan-config {\n"
  "  padding: 0.5em 1em;\n"
  "}\n"
  "#apscan-config label {\n"
  "  margin: 0 0.5em;\n"
  "}\n"
  "#apscan-config span {\n"
  "  margin: 0;\n"
  "}\n"
  "#apscan-config span.disabled {\n"
  "  color: Grey;\n"
  "}\n"
  "#apscan-config input[type='text'],\n"
  "#apscan-config input[type='password'] {\n"
  "  font-family: monospace;\n"
  "  padding: 0 0.25em;\n"
  "}\n"
  "#apscan-config input[type='checkbox'] {\n"
  "  margin: 0 0.1em 0.2em 0.4em;\n"
  "  vertical-align: middle;\n"
  "}\n"
  "h3 {\n"
  "  margin-bottom: 0.5em\n"
  "}\n"
  "ul.itemize {\n"
  "  padding: 0 1em;\n"
  "}\n"
  "ul.itemize li {\n"
  "  margin: 0.25em 0;\n"
  "}\n"
  "ul.itemize input[type='text'],\n"
  "ul.itemize input[type='number'],\n"
  "ul.itemize input[type='time'],\n"
  "ul.itemize select {\n"
  "  font-family: monospace;\n"
  "  box-sizing: border-box;\n"
  "  height: 1.5em;\n"
  "  padding: 0 0.1em;\n"
  "}\n"
  "input::-webkit-inner-spin-button,\n"
  "input::-webkit-clear-button {\n"
  "  -webkit-appearance: none;\n"
  "}\n"
  "li.optional {\n"
  "  list-style-type: none;\n"
  "  text-indent: -1em;\n"
  "}\n"
  "li.optional input.enabler {\n"
  "  margin: 0 0 0.2em 0;\n"
  "  width: 1.2em;\n"
  "  vertical-align: middle;\n"
  "}\n"
  "</style>\n"
  "<script>\n"
  "function getNotifyBanner(formElem) {\n"
  "  var msgElem = document.getElementById('apscan-msg');\n"
  "  if (msgElem == null) {\n"
  "    msgElem = document.createElement('div');\n"
  "    msgElem.id = 'apscan-msg';\n"
  "    formElem.parentNode.insertBefore(msgElem, formElem);\n"
  "  }\n"
  "  return msgElem;\n"
  "}\n"
  "var APScanUI = {};\n"
  "function apscan_update(state, msg) {\n"
  "  // Do not change list if we have a selection\n"
  "  if (SelAP) return;\n"
  "  var listContainer = $('#apscan-list');\n"
  "  var msgElem = getNotifyBanner(APScanUI['Form']);\n"
  "  if (state) {\n"
  "    msgElem.className = 'ready';\n"
  "    msgElem.innerHTML = apscan_genlist(JSON.parse(msg));\n"
  "    listContainer.removeClass('disabled');\n"
  "    APScanUI.Submit.disabled = true;\n"
  "    APScanUI.Refresh.disabled = false;\n"
  "  } else {\n"
  "    msgElem.className = 'notready';\n"
  "    msgElem.innerHTML = msg;\n"
  "    listContainer.addClass('disabled').find('input').attr('disabled',true);\n"
  "    APScanUI.Submit.disabled = true;\n"
  "    APScanUI.Refresh.disabled = true;\n"
  "  }\n"
  "}\n"
  "function apscan_refresh() {\n"
  "  $('#apscan-config').remove();\n"
  "  SelAP = undefined;\n"
  "  APScanUI.Core.probeRefresh();\n"
  "}\n"
  "var APList = [];\n"
  "var SelAP;\n"
  "function apscan_genlist(aps) {\n"
  "  var hiddenAPs = 0;\n"
  "  aps.sort(function(a, b){\n"
  "    // Non-hidden SSIDs ordered higher\n"
  "    if (('SSID' in a) && !('SSID' in b)) return -1;\n"
  "    if (('SSID' in b) && !('SSID' in a)) return 1;\n"
  "    if (('SSID' in a) && ('SSID' in b)) {\n"
  "      // Order SSIDs by text locale ordering\n"
  "      if (a.SSID != b.SSID) return a.SSID.localeCompare(b.SSID);\n"
  "      // Better signal ordered higher\n"
  "      if (a.RF[1] != b.RF[1]) return b.RF[1]-a.RF[1];\n"
  "    } else {\n"
  "      // Supporting WPS boosts order\n"
  "      if (a.Auth.length != b.Auth.length)\n"
  "        return b.Auth.length - a.Auth.length;\n"
  "      // Order by channel\n"
  "      if (a.RF[0] != b.RF[0]) return a.RF[0]-b.RF[0];\n"
  "      // Order by phys\n"
  "      if (a.RF[2] != b.RF[2]) return a.RF[2].localeCompare(b.RF[2]);\n"
  "      // Order by authentication method\n"
  "      if (a.Auth[0] != b.Auth[0])\n"
  "        return a.Auth[0].localeCompare(b.Auth[0]);\n"
  "    }\n"
  "    // Last resort reslution: order by MAC\n"
  "    return a.MAC.localeCompare(b.MAC);\n"
  "  });\n"
  "  var NewAPList = aps.slice();\n"
  "  // Migrate old input data\n"
  "  for (var idx in APList) {\n"
  "    var ap = APList[idx];\n"
  "    for (var jdx in NewAPList) {\n"
  "      var nap = NewAPList[jdx];\n"
  "      if (ap.MAC == nap.MAC) {\n"
  "        if ('iESSID' in ap) nap['iESSID'] = ap.iESSID;\n"
  "        if ('iWPS' in ap) nap['iWPS'] = ap.iWPS;\n"
  "        if ('iAPPass' in ap) nap['iAPPass'] = ap.iAPPass;\n"
  "        break;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  APList = NewAPList;\n"
  "  // Locate currently configured AP and populate records\n"
  "  var apLocated = false;\n"
  "  for (var idx in APList) {\n"
  "    var ap = APList[idx];\n"
  "    if (ap.SSID && ap.SSID == CurConfig.WLAN_AP_Name) {\n"
  "      if (!('iAPPass' in ap) && ('WLAN_AP_Pass' in CurConfig))\n"
  "        ap['iAPPass'] = CurConfig.WLAN_AP_Pass;\n"
  "      ap['iCurrent'] = true;\n"
  "      apLocated = true;\n"
  "      break;\n"
  "    }\n"
  "  }\n"
  "  if (!apLocated && WLANState.STA && WLANState.STA.APMAC &&\n"
  "    CurConfig.WLAN_AP_Name == WLANState.STA.APName) {\n"
  "    for (var idx in APList) {\n"
  "      var ap = APList[idx];\n"
  "      if (ap.MAC == WLANState.STA.APMAC) {\n"
  "        if (!('iAPPass' in ap) && CurConfig.WLAN_AP_Pass)\n"
  "          ap['iAPPass'] = CurConfig.WLAN_AP_Pass;\n"
  "        if (!('iESSID' in ap) && CurConfig.WLAN_AP_Name)\n"
  "          ap['iESSID'] = CurConfig.WLAN_AP_Name;\n"
  "        ap['iCurrent'] = true;\n"
  "        break;\n"
  "      }\n"
  "    }\n"
  "  }\n"
  "  // Append end-of-list item\n"
  "  APList.push({SSID:null});\n"
  "  var container = $('#apscan-list');\n"
  "  container.empty();\n"
  "  var prevAP;\n"
  "  for (var idx in APList) {\n"
  "    var curAP = APList[idx];\n"
  "    if (!prevAP) {\n"
  "      prevAP = curAP;\n"
  "      continue;\n"
  "    } else if (!('SSID' in curAP)) {\n"
  "      do {\n"
  "        if ('SSID' in prevAP) break;\n"
  "        if (prevAP.RF[0] != curAP.RF[0]) break;\n"
  "        if (prevAP.RF[2] != curAP.RF[2]) break;\n"
  "        if (prevAP.Auth.length != curAP.Auth.length) break;\n"
  "        if (prevAP.Auth[0] != curAP.Auth[0]) break;\n"
  "        if (!('cMACs' in prevAP)) prevAP['cMACs'] = [];\n"
  "        prevAP.cMACs.push(curAP.MAC);\n"
  "        if (curAP.iCurrent) {\n"
  "          if (!('iAPPass' in prevAP) && curAP.iAPPass)\n"
  "            prevAP['iAPPass'] = curAP.iAPPass;\n"
  "          if (!('iESSID' in prevAP) && curAP.iESSID)\n"
  "            prevAP['iESSID'] = curAP.iESSID;\n"
  "          prevAP['iCurrent'] = true;\n"
  "        }\n"
  "        curAP = null;\n"
  "      } while (false);\n"
  "    } else {\n"
  "      do {\n"
  "        if (!('SSID' in prevAP)) break;\n"
  "        if (prevAP.SSID != curAP.SSID) break;\n"
  "        if (!('cMACs' in prevAP)) prevAP['cMACs'] = [];\n"
  "        prevAP.cMACs.push(curAP.MAC);\n"
  "        if (curAP.iCurrent) {\n"
  "          if (!('iAPPass' in prevAP) && curAP.iAPPass)\n"
  "            prevAP['iAPPass'] = curAP.iAPPass;\n"
  "          prevAP['iCurrent'] = true;\n"
  "        }\n"
  "        curAP = null;\n"
  "      } while (false);\n"
  "    }\n"
  "    if (curAP) {\n"
  "      var ap = prevAP;\n"
  "      prevAP = curAP;\n"
  "      var dispEntry = '<li'+(ap.iCurrent?' class=\"current\"':'')+'>';\n"
  "      dispEntry+= '<label><input type=\"radio\" name=\"aplist\" value=\"'+ap.MAC+'\">';\n"
  "      if ('SSID' in ap) {\n"
  "        dispEntry+= '<span class=\"apssid apnamed\">'+ap.SSID+'</span>';\n"
  "      } else {\n"
  "        hiddenAPs++;\n"
  "        if ('cMACs' in ap) hiddenAPs+= ap.cMACs.length;\n"
  "        dispEntry+= '<span class=\"apssid aphidden\">(Hidden)</span>';\n"
  "      }\n"
  "      if ('cMACs' in ap) {\n"
  "        var MACList = ap.cMACs.slice();\n"
  "        var MACCnt = MACList.unshift(ap.MAC);\n"
  "        MACList = $.map(MACList, function(item) {\n"
  "          return [ item.substr(0,2), item.substr(2,2), item.substr(4,2),\n"
  "            item.substr(6,2), item.substr(8,2), item.substr(10,2) ].join(':');\n"
  "        });\n"
  "        dispEntry+= '<span class=\"apmac\" title=\"'+MACList.join('\\n')+'\">' +\n"
  "          MACCnt + ' Stations</span>';\n"
  "      } else {\n"
  "        dispEntry+= '<span class=\"apmac\">' +\n"
  "          [ ap.MAC.substr(0,2), ap.MAC.substr(2,2), ap.MAC.substr(4,2),\n"
  "            ap.MAC.substr(6,2), ap.MAC.substr(8,2), ap.MAC.substr(10,2) ].join(':') +\n"
  "          '</span>';\n"
  "      }\n"
  "      dispEntry+= '<span class=\"apchan\">' + ap.RF[0] + '</span>';\n"
  "      dispEntry+= '<span class=\"aprssi\">' + ap.RF[1] + '</span>';\n"
  "      dispEntry+= '<span class=\"apphys\">' + ap.RF[2] + '</span>';\n"
  "      dispEntry+= '<span class=\"apauth\">' + ap.Auth + '</span>';\n"
  "      dispEntry+= '</label></li>';\n"
  "      container.append(dispEntry);\n"
  "    }\n"
  "  }\n"
  "  container.find('input').change(apscan_listsel);\n"
  "  return 'Found '+APList.length+' access points ('+hiddenAPs+' with hidden ssid)';\n"
  "}\n"
  "function apscan_listsel() {\n"
  "  var container = $('#apscan-list');\n"
  "  container.find('#apscan-config').remove();\n"
  "  container.find('.active').removeClass('active');\n"
  "  SelAP = undefined;\n"
  "  var SelInput = $(this);\n"
  "  var SelAPMAC = SelInput.val();\n"
  "  for (var idx in APList) {\n"
  "    var ap = APList[idx];\n"
  "    if (ap.MAC == SelAPMAC) {\n"
  "      SelAP = [ ap ];\n"
  "      break;\n"
  "    }\n"
  "  }\n"
  "  var ConfigBox = '<div id=\"apscan-config\">';\n"
  "  var InputElms = 0;\n"
  "  if (SelAP) {\n"
  "    if (!('SSID' in ap)) {\n"
  "      InputElms++;\n"
  "      ConfigBox+= '<label>SSID: <input type=\"text\" name=\"essid\"></label>';\n"
  "    }\n"
  "    if ($.inArray('OPEN', ap.Auth) < 0) {\n"
  "      InputElms++;\n"
  "      ConfigBox+= '<label>Password: <input type=\"password\" name=\"appass\">';\n"
  "      ConfigBox+= '<span><input type=\"checkbox\" name=\"apshowpass\">Unmask</span>';\n"
  "      if ($.inArray('WPS', ap.Auth) >= 0) {\n"
  "        ConfigBox+= '<span><input type=\"checkbox\" name=\"apwps\">WPS</span>';\n"
  "      }\n"
  "      ConfigBox+= '</label>';\n"
  "    }\n"
  "  } else {\n"
  "    apscan_listupdate(false, 'Internal error - unable to locate AP record');\n"
  "    return;\n"
  "  }\n"
  "  ConfigBox+= '</div>';\n"
  "  var APUIEntry = SelInput.parent();\n"
  "  var APUIContainer = APUIEntry.parent().addClass('active');\n"
  "  if (InputElms) {\n"
  "    APUIEntry.after(ConfigBox);\n"
  "    var APUIConfig = APUIContainer.find('#apscan-config');\n"
  "    if ('iESSID' in ap) APUIConfig.find('input[name=essid]').val(ap.iESSID);\n"
  "    if ('iAPPass' in ap) APUIConfig.find('input[name=appass]').val(ap.iAPPass);\n"
  "    APUIConfig.find('input').on('input', apscan_input);\n"
  "    SelAP.push(APUIConfig);\n"
  "    if (ap.iWPS) APUIConfig.find('input[name=apwps]').click();\n"
  "    var Deselect = function (ev) {\n"
  "      if (ev.keyCode == 27) {\n"
  "        APUIConfig.remove();\n"
  "        APUIContainer.removeClass('active');\n"
  "        SelInput.prop('checked', false);\n"
  "        SelAP = undefined;\n"
  "      }\n"
  "    };\n"
  "    APUIEntry.keyup(Deselect);\n"
  "    APUIConfig.find('input').keyup(Deselect);\n"
  "  }\n"
  "  // Explicitly trigger first round check\n"
  "  apscan_input();\n"
  "}\n"
  "function apscan_listupdate(state, msg) {\n"
  "  var msgElem = getNotifyBanner(APScanUI['Form']);\n"
  "  if (state) {\n"
  "    msgElem.className = 'ready';\n"
  "    msgElem.innerHTML = 'Ready to submit new AP';\n"
  "    APScanUI.Submit.disabled = false;\n"
  "  } else {\n"
  "    msgElem.className = 'notready';\n"
  "    msgElem.innerHTML = msg;\n"
  "    APScanUI.Submit.disabled = true;\n"
  "  }\n"
  "}\n"
  "function apscan_input(ev) {\n"
  "  var needInput = [];\n"
  "  if (!('SSID' in SelAP[0])) {\n"
  "    if (ev && ev.target.name == 'essid')\n"
  "      SelAP[0]['iESSID'] = ev.target.value;\n"
  "    if (!SelAP[0].iESSID) needInput.push('SSID');\n"
  "  }\n"
  "  if (ev && ev.target.name == 'apwps') {\n"
  "    SelAP[0]['iWPS'] = ev.target.checked;\n"
  "    if (ev.target.checked) {\n"
  "      var showpassUI = SelAP[1].find('input[name=apshowpass]').attr('disabled', true);\n"
  "      showpassUI.parent().addClass('disabled');\n"
  "      var passUI = SelAP[1].find('input[name=appass]').attr('disabled', true);\n"
  "      passUI.attr('type', 'text').val('(Use WPS)');\n"
  "    } else {\n"
  "      var showpassUI = SelAP[1].find('input[name=apshowpass]').attr('disabled', false);\n"
  "      showpassUI.parent().removeClass('disabled');\n"
  "      var showpass = showpassUI.prop('checked');\n"
  "      var passUI = SelAP[1].find('input[name=appass]').attr('disabled', false);\n"
  "      passUI.attr('type', showpass?'text':'password').val(SelAP[0].iAPPass);\n"
  "    }\n"
  "  }\n"
  "  if ($.inArray('OPEN', SelAP[0].Auth) < 0) {\n"
  "    if (ev && ev.target.name == 'appass')\n"
  "      SelAP[0]['iAPPass'] = ev.target.value;\n"
  "    if (!SelAP[0].iAPPass) {\n"
  "      if ($.inArray('WPS', SelAP[0].Auth) >= 0) {\n"
  "        if (!SelAP[0].iWPS) needInput.push('Password/WPS');\n"
  "      } else needInput.push('Password');\n"
  "    }\n"
  "  }\n"
  "  if (ev && ev.target.name == 'apshowpass') {\n"
  "    SelAP[1].find('input[name=appass]').attr('type', ev.target.checked?'text':'password');\n"
  "  }\n"
  "  if (needInput.length) {\n"
  "    apscan_listupdate(false, 'Please provide: '+needInput);\n"
  "  } else apscan_listupdate(true);\n"
  "}\n"
  "function apscan_upload() {\n"
  "  var msgElem = getNotifyBanner(APScanUI['Form']);\n"
  "  msgElem.className = 'progress';\n"
  "  msgElem.innerHTML = 'Saving configuration...';\n"
  "  var apRec = {\n"
  "    WLAN_AP_Name: JSON.stringify(SelAP[0].SSID || SelAP[0].iESSID),\n"
  "    WLAN_AP_Pass: JSON.stringify(SelAP[0].iAPPass || null),\n"
  "    WLAN_WPS: JSON.stringify(SelAP[0].iWPS || false)\n"
  "  };\n"
  "  $.get('" PORTAL_API_CONFIG APPLIANCE_CONFIG_FILE "', apRec, function() {\n"
  "    msgElem.className = 'succeed';\n"
  "    msgElem.innerHTML = 'Configuration saved! ' +\n"
  "        'To apply new configuration, please <a href=\"" PORTAL_API_HWCTL_DEVRESTART "\">restart device</a>.';\n"
  "  }).fail(function(xhr, status, error) {\n"
  "    msgElem.className = 'fail';\n"
  "    msgElem.innerHTML = 'Failed to save configuration - ' + xhr.responseText||status;\n"
  "  });\n"
  "}\n"
  "var WLANState;\n"
  "function apscan_init() {\n"
  "  $.getJSON('" PORTAL_API_STATE_WLAN "', function(data) {\n"
  "    WLANState = data;\n"
  "    APScanUI['Form'] = document.getElementById('apscan-form');\n"
  "    APScanUI['Submit'] = document.getElementById('apscan-submit');\n"
  "    APScanUI['Refresh'] = document.getElementById('apscan-refresh');\n"
  "    APScanUI['Core'] = new APScan('" PORTAL_API_HWCTL_APSCAN "', apscan_update);\n"
  "    APScanUI.Refresh.onclick = apscan_refresh;\n"
  "  });\n"
  "}\n"
  "function config_init() {\n"
  "  var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n"
  "  var TZmonths = $('select[name^=\"tz_month\"]');\n"
  "  $.each(months, function(i,v){ TZmonths.append('<option value=\"'+i+'\">'+v+'</option>'); });\n"
  "  var weeks = ['1st','2nd','3rd','4th','5th'];\n"
  "  var TZweeks = $('select[name^=\"tz_week\"]');\n"
  "  $.each(weeks, function(i,v){ TZweeks.append('<option value=\"'+i+'\">'+v+'</option>'); });\n"
  "  var wdays = ['Sun','Mon','Tue','Wed','Thr','Fri','Sat'];\n"
  "  var TZwdays = $('select[name^=\"tz_dow\"]');\n"
  "  $.each(wdays, function(i,v){ TZwdays.append('<option value=\"'+i+'\">'+v+'</option>'); });\n"
  "}\n"
  "var CurConfig;\n"
  "window.onload = function() {\n"
  "  $.getJSON('" PORTAL_API_CONFIG APPLIANCE_CONFIG_FILE "', function(data) {\n"
  "    CurConfig = data;\n"
  "    apscan_init();\n"
  "    config_init();\n"
  "  });\n"
  "};\n"
  "</script>\n"
  "</head>\n"
  "<body>\n"
  "<h1>Appliance Configurations</h1>\n"
  "<hr>\n"

  "<h2>This is the default appliance configurations page.</h2>\n"
  "<p>You can override this page by creating the '" PORTAL_PAGE_SYSCONFIG "' file in the \n"
  "<a href=\"" PORTAL_FSDAV PORTAL_DIR "\">'" PORTAL_DIR "' sub-folder</a>.\n"

  "<ul>\n"
  "<li><h3>Access Point Selection</h3>\n"
  "<form id=\"apscan-form\" action=\"javascript:void(0)\" onsubmit=\"apscan_upload()\">\n"
  "<ol id=\"apscan-list\">\n"
  "</ol>\n"
  "Set selected AP by clicking this button: <input id=\"apscan-submit\" type=\"submit\" value=\"Set AP\" disabled><br>\n"
  "To refresh APs, click this button: <input id=\"apscan-refresh\" type=\"button\" value=\"Refresh List\" disabled></li>\n"
  "</form></li>\n"

  "<li><h3>Misc. WiFi Settings</h3>\n"
  "<ul class=\"itemize\">\n"

  "<li><label>Persist Access Point Assignment: \n"
  "<input type=\"radio\" name=\"persist_wlan\" value=\"true\">Yes \n"
  "<input type=\"radio\" name=\"persist_wlan\" value=\"false\">No</label>\n"
  "<ul><li>Enable to allow persistence of Access Point information in SDK.\n"
  "<li>Speeds up Network initialization upon reboots.\n"
  "</ul>\n"
  "</li>\n"

  "<li><label>WiFi Transmit Power: \n"
  "<input type=\"radio\" name=\"wifi_power\" value=\"0\">Minimum \n"
  "<input type=\"radio\" name=\"wifi_power\" value=\"10.25\">Medium \n"
  "<input type=\"radio\" name=\"wifi_power\" value=\"20.5\">Maximum</label>\n"
  "</li>\n"

  "</ul>\n"
  "</li>\n"
  "<li><h3>System Settings</h3>\n"
  "<ul class=\"itemize\">\n"

  "<li><label>Power Saving: \n"
  "<input type=\"radio\" name=\"power_saving\" value=\"None\">Always On \n"
  "<input type=\"radio\" name=\"power_saving\" value=\"Modem\">Moderate \n"
  "<input type=\"radio\" name=\"power_saving\" value=\"Light\">Aggressive</label>\n"
  "<ul><li>Aggressive power saving may have detrimental effect to network stability.\n"
  "</ul>\n"
  "</li>\n"

  "<li><label>Hostname / Portal AP Name: \n"
  "<input type=\"text\" name=\"hostname\" placeholder=\"Hostname\"></label>\n"
  "</li>\n"

  "<li><label>NTP Server: \n"
  "<input type=\"text\" name=\"ntp_server\" placeholder=\"NTP DNS/IP\"></label>\n"
  "<ul><li>An empty value disables network time synchronization.\n"
  "</ul>\n"
  "</li>\n"

  "<li><label>Timezone Configurations: \n"
  "<ul class=\"itemize\">\n"
  "<li><label>\n"
  "<input type=\"text\" name=\"tz_name_reg\" placeholder=\"Regular TZ Name\">\n"
  "<select name=\"tz_month_reg\"></select>\n"
  "<select name=\"tz_week_reg\"></select>\n"
  "<select name=\"tz_dow_reg\"></select>\n"
  "<input name=\"tz_time_reg\" type=\"time\">\n"
  "<input name=\"tz_ofs_reg\" type=\"number\" placeholder=\"Ofs\"\n"
  "  max=\"840\" min=\"-720\" step=\"30\"> min</label>\n"
  "</li>\n"
  "<li class=\"optional\"><label>\n"
  "<input type=\"checkbox\" class=\"enabler\" name=\"tz_dst_enable\">" // No newlinw
  "<input type=\"text\" name=\"tz_name_dst\" placeholder=\"DST TZ Name\">\n"
  "<select name=\"tz_month_dst\"></select>\n"
  "<select name=\"tz_week_dst\"></select>\n"
  "<select name=\"tz_dow_dst\"></select>\n"
  "<input name=\"tz_time_dat\" type=\"time\">\n"
  "<input name=\"tz_ofs_dst\" type=\"number\" placeholder=\"Ofs\"\n"
  "  max=\"840\" min=\"-720\" step=\"30\"> min</label>\n"
  "</li>\n"
  "</ul>\n"
  "</li>\n"

  "</ul>\n"
  "</li>\n"
  "<li><h3>Framework Behaviour Control</h3>\n"
  "<ul class=\"itemize\">\n"

  "<li><label>Startup Network Initialization Cycle Duration: \n"
  "<input type=\"number\" name=\"init_retry_cycle\" min=\"20\" max=\"60\"></label> sec\n"
  "<ul><li>Interval between retry connecting to configured Access Point.\n"
  "</ul>\n"
  "</li>\n"

  "<li><label>Startup Network Initialization Retries: \n"
  "<input type=\"number\" name=\"init_retry_count\" min=\"1\" max=\"10\"></label> times\n"
  "<ul><li>Number of times to try connecting to configured Access Point.\n"
  "<li>When successfully connected to configure Access Point, appliance enters Service Mode;\n"
  "<li>Otherwise, appliance enters Portal Mode.\n"
  "</ul>\n"
  "</li>\n"

  "<li><label>Portal Mode Idle Network Test Interval: \n"
  "<input type=\"number\" name=\"portal_aptest\" min=\"30\" max=\"600\"></label> sec\n"
  "<ul><li>When in Portal Mode, idle interval before retry connecting to configured Access Point.\n"
  "<li>When successfully connected to configure Access Point, appliance enters Service Mode;\n"
  "<li>Otherwise, appliance remains in Portal Mode.\n"
  "</ul>\n"
  "</li>\n"

  "<li><label>Service Mode Portal Idle Timeout: \n"
  "<input type=\"number\" name=\"portal_timeout\" min=\"0\" max=\"600\"></label> sec\n"
  "<ul><li>When in Service Mode, idle interval before shutting down Portal Web server.\n"
  "<li>A setting of zero will disable automatic start/shutdown of Portal Web server in Service Mode.\n"
  "</ul>\n"
  "</li>\n"

  "<li><label>Production Mode: \n"
  "<input type=\"radio\" name=\"production\" value=\"true\">Yes \n"
  "<input type=\"radio\" name=\"production\" value=\"false\">No</label>\n"
  "<ul><li>When in Production mode, appliance will try not to enter Service Bypass mode upon crashes.\n"
  "</ul>\n"
  "</li>\n"

  "</ul>\n"
  "</li>\n"
  "</ul>\n"
  "</body>\n"
  "</html>";
