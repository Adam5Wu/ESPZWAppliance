
#include "ZWApplianceRes.hpp"

#include <pgmspace.h>

const char PORTAL_RESDATA_INDEX_HTML[] PROGMEM =
  "<!DOCTYPE html>"
  "<html>"
  "<body>"
  "<h1>A Fresh Start!</h1>"
  "<hr>"

  "<h2>This is the default index page.</h2>"
  "<p>Once you have created your own index page, you won't see this page again.<br>"
  "But before then, there are some links below to help you to get around.<br>"
  "(The administrative login user name is '" PORTAL_ADMIN_USER "', which is also the default password.)"

  "<ul>"

  "<li>To manage accounts and access control, <a href=\"" PORTAL_PAGE_AUTHCONFIG "\">click here</a>;"
  "<ul><li><em>You are strongly recommended to change the default adminstrator's password!</em></ul>"

  "<li>To change device configuration, <a href=\"" PORTAL_PAGE_SYSCONFIG "\">click here</a>;"
  "<ul><li><em>Most configuration changes require a restart to become effective.</em></ul>"

  "<li>To restart this device, <a href=\"" PORTAL_API_HWCTL_DEVRESTART "\">click here</a>;"

  "<li>To perform an over-the-air firmware update, <a href=\"" PORTAL_PAGE_OTA "\">click here</a>;"

  "<li>To get a plain view of the whole file system, <a href=\"" PORTAL_FSDAV_ROOT "\">click here</a>;"
  "<ul>"
  "<li><em>The '" PORTAL_DIR "' sub-folder is the effective Web root.</em>"
  "<li><em>Directory index file name is '" PORTAL_PAGE_INDEX "'.</em>"
  "<li>You can also mount this location as a WebDAV folder."
  "</ul>"

  "<li style=\"color:red\">Lastly, to erase all your customizations and start over, "
  "<a href=\"" PORTAL_API_HWCTL_DEVRESET "\">click here</a>."
  "<ul><li><em>Be careful, when you click the above link, there is no going back!</em></ul>"

  "</ul>"

  "</body>"
  "</html>";

const char PORTAL_RESDATA_DEVRESET_HTML[] PROGMEM =
  "<!DOCTYPE html>"
  "<html>"
  "<body>"
  "<h1>Reset in Progress</h1>"
  "<hr>"

  "<h2>This device is being reset...</h2>"
  "<p>All your configurations are erased, and device will reinitialize after restart."

  "<ul>"
  "<li>Wait for about 10 seconds, and <a href=\"" PORTAL_ROOT "\">click here</a>."
  "</ul>"

  "</body>"
  "</html>";

const char PORTAL_RESDATA_DEVRESTART_HTML[] PROGMEM =
  "<!DOCTYPE html>"
  "<html>"
  "<body>"
  "<h1>Restart in Progress</h1>"
  "<hr>"

  "<h2>This device is being restarted...</h2>"
  "<p>All your configurations are persisted, and device will resume operation after restart."

  "<ul>"
  "<li>Wait for about 10 seconds, and <a href=\"" PORTAL_ROOT "\">click here</a>."
  "</ul>"

  "</body>"
  "</html>";

const char PORTAL_RESDATA_PANIC_HTML[] PROGMEM =
  "<!DOCTYPE html>"
  "<html>"
  "<body>"
  "<h1>Ooops, something went horribly wrong!</h1>"
  "<hr>"

  "<h2>But don't worry, this device is not dead yet.</h2>"
  "<p>You can still recover by a hard reset, but you will loose all your configurations."

  "<ul>"
  "<li>To do that, you need to authenticate as an administrator."
  "<li>When you are ready, <a href=\"" PORTAL_API_HWCTL_DEVRESET "\">click here</a>."
  "</ul>"

  "</body>"
  "</html>";

const char PORTAL_RESDATA_OTA_HTML[] PROGMEM =
  "<!DOCTYPE html>"
  "<html>"
  "<head>"
  "<script src=\"" PORTAL_RES_MD5JS "\"></script>"
  "<script src=\"" PORTAL_RES_OTACOREJS "\"></script>"
  "<style>"
  "#ota-msg {"
  "  outline: 1px solid;"
  "  padding: 0.25em;"
  "}"
  "#ota-msg.ready {"
  "  color: grey;"
  "  background: whitesmoke;"
  "}"
  "#ota-msg.notready {"
  "  color: darkgoldenrod;"
  "  background: oldlace;"
  "}"
  "#ota-msg.progress {"
  "  color: cornflowerblue;"
  "  background: aliceblue;"
  "}"
  "#ota-msg.succeed {"
  "  color: mediumseagreen;"
  "  background: mintcream;"
  "}"
  "#ota-msg.fail {"
  "  color: indianred;"
  "  background: lavenderblush;"
  "}"
  "</style>"
  "<script>"
  "function getNotifyBanner(formElem) {"
  "  var msgElem = document.getElementById('ota-msg');"
  "  if (msgElem == null) {"
  "    msgElem = document.createElement('div');"
  "    msgElem.id = 'ota-msg';"
  "    formElem.parentNode.insertBefore(msgElem, formElem);"
  "  }"
  "  return msgElem;"
  "}"
  "var OTAUI = {};"
  "function ota_avail(state, comp, msg) {"
  "  var msgElem = getNotifyBanner(OTAUI['Form']);"
  "  if (state) {"
  "    msgElem.className = 'ready';"
  "    msgElem.innerHTML = 'Ready for upload';"
  "    OTAUI.Submit.disabled = false;"
  "  } else {"
  "    msgElem.className = 'notready';"
  "    msgElem.innerHTML = msg;"
  "    OTAUI.Submit.disabled = true;"
  "  }"
  "}"
  "function ota_select(evt) {"
  "  var uploadSpec = event.srcElement.files;"
  "  if (uploadSpec.length > 0) {"
  "    OTAUI.Core.selectFile(uploadSpec[0]);"
  "  } else {"
  "    OTAUI.Core.selectFile();"
  "  }"
  "}"
  "function ota_upload() {"
  "  OTAUI.Core.uploadDo(function(succ,prog) {"
  "    var msgElem = getNotifyBanner(OTAUI['Form']);"
  "    if (succ === undefined) {"
  "      OTAUI.Abort.disabled = false;"
  "      msgElem.className = 'progress';"
  "      msgElem.innerHTML = 'Upload in progress... ' +"
  "        (prog <= 1? (prog*100).toFixed(1) + '%' : prog);"
  "    } else if (succ) {"
  "      OTAUI.Abort.disabled = true;"
  "      msgElem.className = 'succeed';"
  "      msgElem.innerHTML = 'Upgrade successful! ' +"
  "        'To restart device, <a href=\"" PORTAL_API_HWCTL_DEVRESTART "\">click here</a>.';"
  "    } else {"
  "      OTAUI.Abort.disabled = true;"
  "      msgElem.className = 'fail';"
  "      msgElem.innerHTML = 'Upgrade failed - ' + prog;"
  "    }"
  "  });"
  "}"
  "function ota_abort() {"
  "  OTAUI.Core.uploadAbort();"
  "}"
  "window.onload = function() {"
  "  OTAUI['Form'] = document.getElementById('ota-form');"
  "  OTAUI['Submit'] = document.getElementById('ota-submit');"
  "  OTAUI['Abort'] = document.getElementById('ota-abort');"
  "  OTAUI['Core'] = new OTA('" PORTAL_API_OTA "', ota_avail);"
  "  OTAUI.Abort.onclick = ota_abort;"
  "  OTAUI.Abort.disabled = true;"
  "};"
  "</script>"
  "</head>"
  "<body>"
  "<h1>Firware Update</h1>"
  "<hr>"

  "<h2>This is the default firmware update page.</h2>"
  "<p>You can override this page by creating the '" PORTAL_PAGE_OTA "' file in the "
  "<a href=\"" PORTAL_FSDAV PORTAL_DIR "\">'" PORTAL_DIR "' sub-folder</a>."

  "<form id=\"ota-form\" action=\"javascript:void(0)\" onsubmit=\"ota_upload()\">"
  "<p>Please follow the steps below:"
  "<ol>"

  "<li>Select the firmware file: <input id=\"ota-file\" type=\"file\" onchange=\"ota_select(event)\"></li><br>"
  "<li>Confirm by clicking this button: <input id=\"ota-submit\" type=\"submit\" value=\"Perform Update\"><br>"
  "To abort update, click this button: <input id=\"ota-abort\" type=\"button\" value=\"Abort Update\"></li>"
  "</form>"
  "</ul>"
  "</body>"
  "</html>";

const char PORTAL_RESDATA_SYSCONFIG_HTML[] PROGMEM =
  "<!DOCTYPE html>"
  "<html>"
  "<head>"
  "<script src=\"" PORTAL_RES_JQUERYJS "\"></script>"
  "<script src=\"" PORTAL_RES_APSCANCOREJS "\"></script>"
  "<style>"
  "#apscan-msg {"
  "  outline: 1px solid;"
  "  padding: 0.25em;"
  "}"
  "#apscan-msg.ready {"
  "  color: grey;"
  "  background: whitesmoke;"
  "}"
  "#apscan-msg.notready {"
  "  color: darkgoldenrod;"
  "  background: oldlace;"
  "}"
  "#apscan-msg.progress {"
  "  color: cornflowerblue;"
  "  background: aliceblue;"
  "}"
  "#apscan-msg.succeed {"
  "  color: mediumseagreen;"
  "  background: mintcream;"
  "}"
  "#apscan-msg.fail {"
  "  color: indianred;"
  "  background: lavenderblush;"
  "}"
  "#apscan-list {"
  "  font-family: monospace, courier;"
  "  list-style-type: none;"
  "  padding: 0;"
  "}"
  "#apscan-list li {"
  "  padding: 0.125em 0.25em;"
  "}"
  "#apscan-list li:hover {"
  "  background-color: aliceblue;"
  "}"
  "#apscan-list li.active {"
  "  background-color: lightblue;"
  "}"
  "#apscan-list label {"
  "  cursor: pointer;"
  "}"
  "#apscan-list input[type='radio'] {"
  "  width: 1em;"
  "  margin: 0;"
  "  outline: none;"
  "  vertical-align: middle;"
  "}"
  "#apscan-list span {"
  "  display: inline-block;"
  "  margin: 0 0.5em;"
  "  vertical-align: middle;"
  "  white-space: nowrap;"
  "  overflow: hidden;"
  "  text-overflow: ellipsis;"
  "}"
  "#apscan-list span.apssid {"
  "  width: 16em;"
  "}"
  "#apscan-list span.apssid:before {"
  "  content: 'SSID=';"
  "}"
  "#apscan-list span.apnamed {"
  "  color: Blue;"
  "}"
  "#apscan-list span.aphidden {"
  "  color: Grey;"
  "}"
  "#apscan-list span.apmac {"
  "  color: Navy;"
  "  width: 11em;"
  "}"
  "#apscan-list span.apmac:before {"
  "  content: '[';"
  "}"
  "#apscan-list span.apmac:after {"
  "  content: ']';"
  "}"
  "#apscan-list span.apchan {"
  "  width: 3em;"
  "  color: ForestGreen;"
  "}"
  "#apscan-list span.apchan:before {"
  "  content: 'CH=';"
  "}"
  "#apscan-list span.aprssi {"
  "  width: 5em;"
  "  color: Maroon;"
  "}"
  "#apscan-list span.aprssi:before {"
  "  content: 'RSSI=';"
  "}"
  "#apscan-list span.apphys {"
  "  width: 4.5em;"
  "  color: RebeccaPurple;"
  "}"
  "#apscan-list span.apphys:before {"
  "  content: 'PHYS=';"
  "}"
  "#apscan-list span.apauth {"
  "  width: 12em;"
  "  color: GoldenRod;"
  "}"
  "#apscan-list span.apauth:before {"
  "  content: 'Auth=';"
  "}"
  "#apscan-list.disabled span {"
  "  color: Grey;"
  "}"
  "#apscan-list.disabled li:hover {"
  "  background-color: WhiteSmoke;"
  "}"
  "#apscan-config {"
  "  padding: 0.5em 1em;"
  "}"
  "#apscan-config label {"
  "  margin: 0 0.5em;"
  "}"
  "#apscan-config span {"
  "  margin: 0;"
  "}"
  "#apscan-config span.disabled {"
  "  color: Grey;"
  "}"
  "#apscan-config input[type='text'],"
  "#apscan-config input[type='password'] {"
  "  font-family: monospace, courier;"
  "  padding: 0 0.25em;"
  "}"
  "#apscan-config input[type='checkbox'] {"
  "  margin: 0 0.1em 0.2em 0.4em;"
  "  vertical-align: middle;"
  "}"
  "</style>"
  "<script>"
  "function getNotifyBanner(formElem) {"
  "  var msgElem = document.getElementById('apscan-msg');"
  "  if (msgElem == null) {"
  "    msgElem = document.createElement('div');"
  "    msgElem.id = 'apscan-msg';"
  "    formElem.parentNode.insertBefore(msgElem, formElem);"
  "  }"
  "  return msgElem;"
  "}"
  "var APScanUI = {};"
  "function apscan_update(state, msg) {"
  "  // Do not change list if we have a selection\n"
  "  if (SelAP) return;"
  "  var listContainer = $('#apscan-list');"
  "  var msgElem = getNotifyBanner(APScanUI['Form']);"
  "  if (state) {"
  "    msgElem.className = 'ready';"
  "    msgElem.innerHTML = apscan_genlist(JSON.parse(msg));"
  "    listContainer.removeClass('disabled');"
  "    APScanUI.Submit.disabled = true;"
  "    APScanUI.Refresh.disabled = false;"
  "  } else {"
  "    msgElem.className = 'notready';"
  "    msgElem.innerHTML = msg;"
  "    listContainer.addClass('disabled').find('input').attr('disabled',true);"
  "    APScanUI.Submit.disabled = true;"
  "    APScanUI.Refresh.disabled = true;"
  "  }"
  "}"
  "function apscan_refresh() {"
  "  $('#apscan-config').remove();"
  "  SelAP = undefined;"
  "  APScanUI.Core.probeRefresh();"
  "}"
  "var APList = [];"
  "var SelAP;"
  "function apscan_genlist(aps) {"
  "  var hiddenAPs = 0;"
  "  aps.sort(function(a, b){"
  "    // Non-hidden SSIDs ordered higher\n"
  "    if (('SSID' in a) && !('SSID' in b)) return -1;"
  "    if (('SSID' in b) && !('SSID' in a)) return 1;"
  "    if (('SSID' in a) && ('SSID' in b)) {"
  "      // Better signal ordered higher\n"
  "      if (a.RF[1] != b.RF[1]) return b.RF[1]-a.RF[1];"
  "      // Order SSIDs by text locale ordering\n"
  "      if (a.SSID != b.SSID) return a.SSID.localeCompare(b.SSID);"
  "    } else {"
  "      // Supporting WPS boosts order\n"
  "      if (a.Auth.length != b.Auth.length)"
  "        return b.Auth.length - a.Auth.length;"
  "      // Order by channel\n"
  "      if (a.RF[0] != b.RF[0]) return a.RF[0]-b.RF[0];"
  "      // Order by phys\n"
  "      if (a.RF[2] != b.RF[2]) return a.RF[2].localeCompare(b.RF[2]);"
  "      // Order by authentication method\n"
  "      if (a.Auth[0] != b.Auth[0])"
  "        return a.Auth[0].localeCompare(b.Auth[0]);"
  "    }"
  "    // Last resort reslution: order by MAC\n"
  "    return a.MAC.localeCompare(b.MAC);"
  "  });"
  "  var NewAPList = aps.slice();"
  "  // Migrate old input data\n"
  "  for (var idx in APList) {"
  "    var ap = APList[idx];"
  "    for (var jdx in NewAPList) {"
  "      var nap = NewAPList[jdx];"
  "      if (ap.MAC == nap.MAC) {"
  "        if ('iESSID' in ap) nap['iESSID'] = ap.iESSID;"
  "        if ('iWPS' in ap) nap['iWPS'] = ap.iWPS;"
  "        if ('iAPPass' in ap) nap['iAPPass'] = ap.iAPPass;"
  "        break;"
  "      }"
  "    }"
  "  }"
  "  APList = NewAPList;"
  "  // Append end-of-list item\n"
  "  APList.push({SSID:null});"
  "  var container = $('#apscan-list');"
  "  container.empty();"
  "  var prevAP;"
  "  for (var idx in APList) {"
  "    var curAP = APList[idx];"
  "    if (!prevAP) {"
  "      prevAP = curAP;"
  "      continue;"
  "    } else while (!('SSID' in curAP)) {"
  "      if ('SSID' in prevAP) break;"
  "      if (prevAP.RF[0] != curAP.RF[0]) break;"
  "      if (prevAP.RF[2] != curAP.RF[2]) break;"
  "      if (prevAP.Auth.length != curAP.Auth.length) break;"
  "      if (prevAP.Auth[0] != curAP.Auth[0]) break;"
  "      if (!('cMACs' in prevAP)) prevAP['cMACs'] = [];"
  "        prevAP.cMACs.push(curAP.MAC);"
  "      curAP = null;"
  "      break;"
  "    }"
  "    if (curAP) {"
  "      var ap = prevAP;"
  "      prevAP = curAP;"
  "      var dispEntry = '<li><label><input type=\"radio\" name=\"aplist\" value=\"'+ap.MAC+'\">';"
  "      if ('SSID' in ap) {"
  "        dispEntry+= '<span class=\"apssid apnamed\">'+ap.SSID+'</span>';"
  "      } else {"
  "        hiddenAPs++;"
  "        if ('cMACs' in ap) hiddenAPs+= ap.cMACs.length;"
  "        dispEntry+= '<span class=\"apssid aphidden\">(Hidden)</span>';"
  "      }"
  "      if ('cMACs' in ap) {"
  "        var MACList = ap.cMACs.slice();"
  "        var MACCnt = MACList.unshift(ap.MAC);"
  "        MACList = $.map(MACList, function(item) {"
  "          return [ item.substr(0,2), item.substr(2,2), item.substr(4,2),"
  "            item.substr(6,2), item.substr(8,2), item.substr(10,2) ].join(':');"
  "        });"
  "        dispEntry+= '<span class=\"apmac\" title=\"'+MACList.join('\\n')+'\">' +"
  "          MACCnt + ' Stations</span>';"
  "      } else {"
  "        dispEntry+= '<span class=\"apmac\">' +"
  "          [ ap.MAC.substr(0,2), ap.MAC.substr(2,2), ap.MAC.substr(4,2),"
  "            ap.MAC.substr(6,2), ap.MAC.substr(8,2), ap.MAC.substr(10,2) ].join(':') +"
  "          '</span>';"
  "      }"
  "      dispEntry+= '<span class=\"apchan\">' + ap.RF[0] + '</span>';"
  "      dispEntry+= '<span class=\"aprssi\">' + ap.RF[1] + '</span>';"
  "      dispEntry+= '<span class=\"apphys\">' + ap.RF[2] + '</span>';"
  "      dispEntry+= '<span class=\"apauth\">' + ap.Auth + '</span>';"
  "      dispEntry+= '</label></li>';"
  "      container.append(dispEntry);"
  "    }"
  "  }"
  "  container.find('input').change(apscan_listsel);"
  "  return 'Found '+APList.length+' access points ('+hiddenAPs+' with hidden ssid)';"
  "}"
  "function apscan_listsel() {"
  R"(
    var container = $('#apscan-list');
    container.find('#apscan-config').remove();
    container.find('.active').removeClass('active');
    SelAP = undefined;
    var SelInput = $(this);
    var SelAPMAC = SelInput.val();
    for (var idx in APList) {
      var ap = APList[idx];
      if (ap.MAC == SelAPMAC) {
        SelAP = [ ap ];
        break;
      }
    }
    var ConfigBox = '<div id="apscan-config">';
    var InputElms = 0;
    if (SelAP) {
      if (!('SSID' in ap)) {
        InputElms++;
        ConfigBox+= '<label>SSID: <input type="text" name="essid"></label>';
      }
      if ($.inArray('OPEN', ap.Auth) < 0) {
        InputElms++;
        ConfigBox+= '<label>Password: <input type="password" name="appass">';
        ConfigBox+= '<span><input type="checkbox" name="apshowpass">Unmask</span>';
        if ($.inArray('WPS', ap.Auth) >= 0) {
          ConfigBox+= '<span><input type="checkbox" name="apwps">WPS</span>';
        }
        ConfigBox+= '</label>';
      }
    } else {
      apscan_listupdate(false, 'Internal error - unable to locate AP record');
      return;
    }
    ConfigBox+= '</div>';
    var APUIEntry = SelInput.parent();
    var APUIContainer = APUIEntry.parent().addClass('active');
    if (InputElms) {
      APUIEntry.after(ConfigBox);
      var APUIConfig = APUIContainer.find('#apscan-config');
      if ('iESSID' in ap) APUIConfig.find('input[name=essid]').val(ap.iESSID);
      if ('iAPPass' in ap) APUIConfig.find('input[name=appass]').val(ap.iAPPass);
      APUIConfig.find('input').on('input', apscan_input);
      SelAP.push(APUIConfig);
      if (ap.iWPS) APUIConfig.find('input[name=apwps]').click();
      var Deselect = function (ev) {
        if (ev.keyCode == 27) {
          APUIConfig.remove();
          APUIContainer.removeClass('active');
          SelInput.prop('checked', false);
          SelAP = undefined;
        }
      };
      APUIEntry.keyup(Deselect);
      APUIConfig.find('input').keyup(Deselect);
    }
    // Explicitly trigger first round check
    apscan_input();
  )"
  "}"
  "function apscan_listupdate(state, msg) {"
  "  var msgElem = getNotifyBanner(APScanUI['Form']);"
  "  if (state) {"
  "    msgElem.className = 'ready';"
  "    msgElem.innerHTML = 'Ready to submit new AP';"
  "    APScanUI.Submit.disabled = false;"
  "  } else {"
  "    msgElem.className = 'notready';"
  "    msgElem.innerHTML = msg;"
  "    APScanUI.Submit.disabled = true;"
  "  }"
  "}"
  "function apscan_input(ev) {"
  "  var needInput = [];"
  "  if (!('SSID' in SelAP[0])) {"
  "    if (ev && ev.target.name == 'essid')"
  "      SelAP[0]['iESSID'] = ev.target.value;"
  "    if (!SelAP[0].iESSID) needInput.push('SSID');"
  "  }"
  "  if (ev && ev.target.name == 'apwps') {"
  "    SelAP[0]['iWPS'] = ev.target.checked;"
  "    if (ev.target.checked) {"
  "      var showpassUI = SelAP[1].find('input[name=apshowpass]').attr('disabled', true);"
  "      showpassUI.parent().addClass('disabled');"
  "      var passUI = SelAP[1].find('input[name=appass]').attr('disabled', true);"
  "      passUI.attr('type', 'text').val('(Use WPS)');"
  "    } else {"
  "      var showpassUI = SelAP[1].find('input[name=apshowpass]').attr('disabled', false);"
  "      showpassUI.parent().removeClass('disabled');"
  "      var showpass = showpassUI.prop('checked');"
  "      var passUI = SelAP[1].find('input[name=appass]').attr('disabled', false);"
  "      passUI.attr('type', showpass?'text':'password').val(SelAP[0].iAPPass);"
  "    }"
  "  }"
  "  if ($.inArray('OPEN', SelAP[0].Auth) < 0) {"
  "    if (ev && ev.target.name == 'appass')"
  "      SelAP[0]['iAPPass'] = ev.target.value;"
  "    if (!SelAP[0].iAPPass) {"
  "      if ($.inArray('WPS', SelAP[0].Auth) >= 0) {"
  "        if (!SelAP[0].iWPS) needInput.push('Password/WPS');"
  "      } else needInput.push('Password');"
  "    }"
  "  }"
  "  if (ev && ev.target.name == 'apshowpass') {"
  "    SelAP[1].find('input[name=appass]').attr('type', ev.target.checked?'text':'password');"
  "  }"
  "  if (needInput.length) {"
  "    apscan_listupdate(false, 'Please provide: '+needInput);"
  "  } else apscan_listupdate(true);"
  "}"
  "function apscan_upload() {"
  "}"
  "window.onload = function() {"
  "  APScanUI['Form'] = document.getElementById('apscan-form');"
  "  APScanUI['Submit'] = document.getElementById('apscan-submit');"
  "  APScanUI['Refresh'] = document.getElementById('apscan-refresh');"
  "  APScanUI['Core'] = new APScan('" PORTAL_API_APSCAN "', apscan_update);"
  "  APScanUI.Refresh.onclick = apscan_refresh;"
  "  APScanUI.Refresh.disabled = true;"
  "};"
  "</script>"
  "</head>"
  "<body>"
  "<h1>Appliance Configurations</h1>"
  "<hr>"

  "<h2>This is the default appliance configurations page.</h2>"
  "<p>You can override this page by creating the '" PORTAL_PAGE_SYSCONFIG "' file in the "
  "<a href=\"" PORTAL_FSDAV PORTAL_DIR "\">'" PORTAL_DIR "' sub-folder</a>."

  "<ul>"
  "<li><h3>Access Point Selection</h3>"
  "<form id=\"apscan-form\" action=\"javascript:void(0)\" onsubmit=\"apscan_upload()\">"
  "<ol id=\"apscan-list\">"
  "</ol>"
  "Set selected AP by clicking this button: <input id=\"apscan-submit\" type=\"submit\" value=\"Set AP\"><br>"
  "To refresh APs, click this button: <input id=\"apscan-refresh\" type=\"button\" value=\"Refresh List\"></li>"
  "</form></li>"
  "</ul>"
  "</body>"
  "</html>";
